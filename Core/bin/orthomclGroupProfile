#!/usr/bin/perl 

use strict;

use lib '@targetDir@/lib/perl';
$ENV{GUS_HOME} = '@targetDir@';

use OrthoMCLModel::Ppe::MatrixColumnManager;
use ApiCommonWebsite::Model::ModelConfig;
use DBI;

my $groupName = $ARGV[0] || die "usage: orthomclGroupProfile group_name \n";
my $cladeFile = "$ENV{GUS_HOME}/config/orthomclClades.txt";
my $speciesFile = "$ENV{GUS_HOME}/config/orthomclSpecies.txt";

my $dbh = &getDbHandle();

my $colMgr = OrthoMCLModel::Ppe::MatrixColumnManager->new($dbh);

my $sql = "
select m.*
from apidb.grouptaxonmatrix m, apidb.orthologgroup g
where g.name = '$groupName'
and  m.ortholog_group_id = g.ortholog_group_id
";

my $stmt = &getDbHandle()->prepare($sql);
$stmt->execute();
my $proteinCounts;
my $taxonCounts;
while (my $row = $stmt->fetchrow_hashref()) {
  foreach my $colName (keys(%$row)) {
    next unless $colName =~ /column\d+/i;
    my ($taxonAbbrev, $proteinOrTaxonFlag) = $colMgr->getTaxonAbbrev($colName);
    if ($proteinOrTaxonFlag eq 'P') {
	$proteinCounts->{$taxonAbbrev} = $row->{$colName};
    } else {
	$taxonCounts->{$taxonAbbrev} = $row->{$colName};
    }
  }
}

my $clades;
open(SPECIES, $speciesFile) || die "can't open species file '$speciesFile'\n";
while (<SPECIES>) {
    chomp;
    my ($species, $clade) = split(/\t/);
    $clades->{$clade} = [] unless $clades->{$clade};
    push(@{$clades->{$clade}}, $species);
}
close(SPECIES);

open(CLADE, $cladeFile) || die "can't open clade file '$cladeFile'\n";
my $pipes = '| | | | | | | | | | | | | | | | | | | | | ';
while (<CLADE>) {
    chomp;
    /^([\|\s\s]*)([A-Z]{3})/;
    my $indent = $1;
    my $cladeAbbrev = $2;
    print "$indent$cladeAbbrev    T:$taxonCounts->{$cladeAbbrev}  P:$proteinCounts->{$cladeAbbrev}\n";
    foreach my $species (@{$clades->{$cladeAbbrev}}) {
	print "$indent|  $species T:$taxonCounts->{$species}  P:$proteinCounts->{$species}\n" if $proteinCounts->{$species};
    }
			 
}

sub getDbHandle {
  my $c = new ApiCommonWebsite::Model::ModelConfig("OrthoMCL");

  my $dsn = $c->getDbiDsn();
  my $login = $c->getLogin();

  my $dbh = DBI->connect(
                $c->getDbiDsn, 
                $c->getLogin, 
                $c->getPassword,
                { PrintError => 1, RaiseError => 0}
                ) or die "Can't connect to the database: $DBI::errstr\n";
  return $dbh;
}
